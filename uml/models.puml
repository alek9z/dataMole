@startuml models
!define COMMENT(x) <color:grey>x</color>
skinparam groupInheritance 3

abstract class QAbstractItemModel {
  + rowCount()
  + columnCount()
  + data()
  + headerData()
  + setHeaderData()
  + canFetchMore()
  + fetchMore()
}
note right of QAbstractItemModel #white
Base class for Qt models, only relevant 
methods are shown
endnote

abstract class QAbstractTableModel

note bottom of QAbstractTableModel #white
Specialised model 
for tabular data
endnote

abstract class QAbstractProxyModel
class QSortFilterProxyModel {
  + filterAcceptsRow()
}
class QIdentityProxyModel
class QWidget
class QTableView
QWidget <|-- QTableView
QAbstractItemModel <|-- QAbstractProxyModel
QAbstractItemModel <|---- QAbstractTableModel
QAbstractProxyModel <|-- QSortFilterProxyModel 
QAbstractProxyModel <|-- QIdentityProxyModel

package data {
  class Shape {
    + index: List[str]
    + indexTypes: List[Type]
    + columnNames: List[str]
    + columnTypes: List[Type]
    + columnsDict(): Dict
    + indexDict(): Dict
  }

  class Frame {
    - df: pandas.Dataframe
    + shape(): Shape
    + fromShape(shape: Shape)
  }
}

Frame -> Shape
note right of Frame #white
Wrapper for Pandas dataframes
endnote

package mainmodels {
class FrameModel {
  + name: str
  - frame: Frame
  - shape: Shape
  # statistics: Dict
  # histogram: Dict

  + frame(): Frame
  + shape(): Shape
  + setFrame(frame: Frame)
  + statistics(): Dict
  + histogram(): Dict
}

QAbstractTableModel <|-- FrameModel
FrameModel o-- Frame
FrameModel o-- Shape

class IncrementalRenderFrameModel {
  # batchRows: int
  # batchCols: int
  # loadedRows: int
  # loadedCols: int
  # scrollMode: str
  + canFetchMore()
  + fetchMore()
}
QIdentityProxyModel <|-- IncrementalRenderFrameModel
IncrementalRenderFrameModel o--- FrameModel

interface AbstractAttributeModel <<interface>> {
  + {abstract} checkboxColumn(): int
  + {abstract} typeColumn(): int
  + {abstract} nameColumn(): int
  + {abstract} frameModel(): FrameModel
  + {abstract} setFrameModel(model: FrameModel)
  + {abstract} checked(): Iterable[int]
  + {abstract} setChecked(rows: Iterable[int], value: bool)
  + {abstract} setAllChecked(value: bool)
}

class AttributeTableModel {
  # frameModel: FrameModel
}
QAbstractTableModel <|-- AttributeTableModel
AbstractAttributeModel <|.. AttributeTableModel
AttributeTableModel o-- FrameModel

class AttributeProxyModel {
  # filterTypes: List[Type]
  + filters()
  + setFilters(filterTypes: List[Type])
}
QSortFilterProxyModel <|-- AttributeProxyModel
AbstractAttributeModel <|.. AttributeProxyModel
AttributeProxyModel o- AttributeTableModel


class SearchableAttributeTableWidget {
  - model: AttributeProxyModel
  + tableView
}
QWidget <|-- SearchableAttributeTableWidget
SearchableAttributeTableWidget o-- AttributeProxyModel
SearchableAttributeTableWidget o-- SignalTableView

class SignalTableView
QTableView <|-- SignalTableView
}

@enduml


@startuml workbench

package workbench {

class WorkbenchModel {
  - workbench: List[FrameModel]
  - nameToIndex: Dict[str, int]
  + modelList(): List[FrameModel]
  + modelDict(): Dict[str, FrameModel]
  + names(): List[str]
  + getDataframeModelByIndex(index: int): FrameModel
  + getDataframeModelByName(name: str): FrameModel
  + setDataframeByName(name: str, value: Frame)
}

class WorkbenchView {
  # editable: bool
  + mousePressEvent(event)
  + mouseMoveEvent(event)
  + mouseReleaseEvent(event)
  + contextMenuEvent(event)
} 
}

class FrameModel {
  + name: str
  - frame: Frame
}

class Frame {
    - df: pandas.Dataframe
    + shape(): Shape
    + fromShape(shape: Shape)
}

abstract class QAbstractTableModel

QAbstractTableModel <|-- WorkbenchModel
QTableView <|-- WorkbenchView
FrameModel o- Frame
WorkbenchModel *-- FrameModel

@enduml